/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Holdy API
 * Holdy API
 * OpenAPI spec version: v1.0
 */

import type { BodyType } from "../../utils/http";

import { http } from "../../utils/http";
import type {
  ApiResultListRouteMissionListResponse,
  ApiResultRouteMissionResponse,
  ApiResultString,
  CreateRouteMissionBody,
  GetRouteMissionsParams,
  UpdateRouteMissionBody,
} from ".././model";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 루트미션 목록을 조회합니다. 클라이밍장, 섹터, 난이도로 필터링 가능합니다.
 * @summary 루트미션 목록 조회
 */
export const getRouteMissions = (
  params?: GetRouteMissionsParams,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultListRouteMissionListResponse>(
    { url: `/api/route-missions`, method: "GET", params },
    options
  );
};
/**
 * 새로운 루트미션을 생성합니다. 루트 이미지, 가이드 영상, 썸네일을 함께 업로드합니다.
 * @summary 루트미션 생성
 */
export const createRouteMission = (
  createRouteMissionBody: BodyType<CreateRouteMissionBody>,
  options?: SecondParameter<typeof http>
) => {
  const formData = new FormData();
  formData.append(`data`, JSON.stringify(createRouteMissionBody.data));
  formData.append(`routeImage`, createRouteMissionBody.routeImage);
  formData.append(`guideVideo`, createRouteMissionBody.guideVideo);
  formData.append(`videoThumbnail`, createRouteMissionBody.videoThumbnail);

  return http<ApiResultRouteMissionResponse>(
    {
      url: `/api/route-missions`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};
/**
 * 특정 루트미션의 상세 정보를 조회합니다.
 * @summary 루트미션 상세 조회
 */
export const getRouteMission = (
  missionId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultRouteMissionResponse>(
    { url: `/api/route-missions/${missionId}`, method: "GET" },
    options
  );
};
/**
 * 루트미션을 삭제합니다. (Soft Delete)
 * @summary 루트미션 삭제
 */
export const deleteRouteMission = (
  missionId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultString>(
    { url: `/api/route-missions/${missionId}`, method: "DELETE" },
    options
  );
};
/**
 * 기존 루트미션을 수정합니다. 파일은 선택적으로 업로드 가능합니다.
 * @summary 루트미션 수정
 */
export const updateRouteMission = (
  missionId: number,
  updateRouteMissionBody: BodyType<UpdateRouteMissionBody>,
  options?: SecondParameter<typeof http>
) => {
  const formData = new FormData();
  formData.append(`data`, JSON.stringify(updateRouteMissionBody.data));
  if (updateRouteMissionBody.routeImage !== undefined) {
    formData.append(`routeImage`, updateRouteMissionBody.routeImage);
  }
  if (updateRouteMissionBody.guideVideo !== undefined) {
    formData.append(`guideVideo`, updateRouteMissionBody.guideVideo);
  }
  if (updateRouteMissionBody.videoThumbnail !== undefined) {
    formData.append(`videoThumbnail`, updateRouteMissionBody.videoThumbnail);
  }

  return http<ApiResultRouteMissionResponse>(
    {
      url: `/api/route-missions/${missionId}`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};
export type GetRouteMissionsResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMissions>>
>;
export type CreateRouteMissionResult = NonNullable<
  Awaited<ReturnType<typeof createRouteMission>>
>;
export type GetRouteMissionResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMission>>
>;
export type DeleteRouteMissionResult = NonNullable<
  Awaited<ReturnType<typeof deleteRouteMission>>
>;
export type UpdateRouteMissionResult = NonNullable<
  Awaited<ReturnType<typeof updateRouteMission>>
>;
