/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Holdy API
 * Holdy API
 * OpenAPI spec version: v1.0
 */
import type {
  CreateAttemptRequest,
  CreateAttemptResponse,
  RouteMissionRecommendationResponse,
  RouteMissionUploadChunkRequest,
  RouteMissionUploadChunkResponse,
  RouteMissionUploadSessionFinalizeResponse,
  RouteMissionUploadSessionInitializeRequest,
  RouteMissionUploadSessionInitializeResponse,
  RouteMissionUploadStatusResponse,
} from ".././model";

import { http } from "../../utils/http";
import type { BodyType } from "../../utils/http";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 루트미션에 대한 도전기록을 등록합니다. 성공 시 SR이 증가합니다.
 * @summary 루트미션 도전기록 등록
 */
export const createAttempt = (
  createAttemptRequest: BodyType<CreateAttemptRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<CreateAttemptResponse>(
    {
      url: `/attempts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAttemptRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 세션 마무리
 * @summary 해당 도전의 영상 업로드 세션 마무리
 */
export const finalizeRouteMissionUploadSession = (
  attemptId: number,
  uploadId: string,
  options?: SecondParameter<typeof http>
) => {
  return http<RouteMissionUploadSessionFinalizeResponse>(
    {
      url: `/attempts/${attemptId}/upload/${uploadId}/finalize`,
      method: "POST",
    },
    options
  );
};
/**
 * 해당 도전의 영상 청크 업로드
 * @summary 해당 도전의 영상 청크 업로드
 */
export const uploadRouteMissionVideoChunk = (
  attemptId: number,
  uploadId: string,
  routeMissionUploadChunkRequest: BodyType<RouteMissionUploadChunkRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<RouteMissionUploadChunkResponse>(
    {
      url: `/attempts/${attemptId}/upload/${uploadId}/chunk`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: routeMissionUploadChunkRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 세션 생성하기
 * @summary 해당 도전의 영상 업로드 세션 생성하기
 */
export const initializeRouteMissionUploadSession = (
  attemptId: number,
  routeMissionUploadSessionInitializeRequest: BodyType<RouteMissionUploadSessionInitializeRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<RouteMissionUploadSessionInitializeResponse>(
    {
      url: `/attempts/${attemptId}/upload/initialize`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: routeMissionUploadSessionInitializeRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 상태 불러오기
 * @summary 해당 도전의 영상 업로드 상태 불러오기
 */
export const getRouteMissionUploadStatus = (
  attemptId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<RouteMissionUploadStatusResponse>(
    { url: `/attempts/${attemptId}/upload/status`, method: "GET" },
    options
  );
};
/**
 * 도전한 루트미션과 비슷한 난이도의 루트미션 리스트를 받아보기
 * @summary 도전한 루트미션과 비슷한 난이도의 루트미션 리스트 불러오기
 */
export const getRouteMissionRecommendationByAttempt = (
  attemptId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<RouteMissionRecommendationResponse>(
    { url: `/attempts/${attemptId}/recommendations`, method: "GET" },
    options
  );
};
export type CreateAttemptResult = NonNullable<
  Awaited<ReturnType<typeof createAttempt>>
>;
export type FinalizeRouteMissionUploadSessionResult = NonNullable<
  Awaited<ReturnType<typeof finalizeRouteMissionUploadSession>>
>;
export type UploadRouteMissionVideoChunkResult = NonNullable<
  Awaited<ReturnType<typeof uploadRouteMissionVideoChunk>>
>;
export type InitializeRouteMissionUploadSessionResult = NonNullable<
  Awaited<ReturnType<typeof initializeRouteMissionUploadSession>>
>;
export type GetRouteMissionUploadStatusResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMissionUploadStatus>>
>;
export type GetRouteMissionRecommendationByAttemptResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMissionRecommendationByAttempt>>
>;
