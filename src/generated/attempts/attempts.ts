/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Holdy API
 * Holdy API
 * OpenAPI spec version: v1.0
 */

import type { BodyType } from "../../utils/http";

import { http } from "../../utils/http";
import type {
  ApiResultAttemptStatusResponse,
  ApiResultCreateAttemptResponse,
  ApiResultListRouteMissionRecommendationResponse,
  ApiResultListUserMissionAttemptResponse,
  ApiResultPageAttemptResponse,
  ApiResultRouteMissionUploadChunkResponse,
  ApiResultRouteMissionUploadSessionFinalizeResponse,
  ApiResultRouteMissionUploadSessionInitializeResponse,
  ApiResultRouteMissionUploadStatusResponse,
  ApiResultSessionAttemptResponse,
  CreateAttemptRequest,
  FinalizeRouteMissionUploadSessionBody,
  GetAttemptsParams,
  RouteMissionUploadChunkRequest,
  RouteMissionUploadSessionInitializeRequest,
} from ".././model";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 사용자가 성공한 모든 도전 기록들을 최신순으로 조회합니다.
 * @summary 성공한 도전 기록 조회
 */
export const getAttempts = (
  params?: GetAttemptsParams,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultPageAttemptResponse>(
    { url: `/api/attempts`, method: "GET", params },
    options
  );
};
/**
 * 루트미션에 대한 도전기록을 등록합니다. 성공 시 SR이 증가합니다.
 * @summary 루트미션 도전기록 등록
 */
export const createAttempt = (
  createAttemptRequest: BodyType<CreateAttemptRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultCreateAttemptResponse>(
    {
      url: `/api/attempts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAttemptRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 세션을 마무리하고 썸네일을 함께 업로드합니다.
 * @summary 해당 도전의 영상 업로드 세션 마무리
 */
export const finalizeRouteMissionUploadSession = (
  attemptId: number,
  uploadId: string,
  finalizeRouteMissionUploadSessionBody: BodyType<FinalizeRouteMissionUploadSessionBody>,
  options?: SecondParameter<typeof http>
) => {
  const formData = new FormData();
  if (finalizeRouteMissionUploadSessionBody.thumbnail !== undefined) {
    formData.append(
      `thumbnail`,
      finalizeRouteMissionUploadSessionBody.thumbnail
    );
  }

  return http<ApiResultRouteMissionUploadSessionFinalizeResponse>(
    {
      url: `/api/attempts/${attemptId}/upload/${uploadId}/finalize`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};
/**
 * 해당 도전의 영상 청크 업로드
 * @summary 해당 도전의 영상 청크 업로드
 */
export const uploadRouteMissionVideoChunk = (
  attemptId: number,
  uploadId: string,
  routeMissionUploadChunkRequest: BodyType<RouteMissionUploadChunkRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultRouteMissionUploadChunkResponse>(
    {
      url: `/api/attempts/${attemptId}/upload/${uploadId}/chunk`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: routeMissionUploadChunkRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 세션 생성하기
 * @summary 해당 도전의 영상 업로드 세션 생성하기
 */
export const initializeRouteMissionUploadSession = (
  attemptId: number,
  routeMissionUploadSessionInitializeRequest: BodyType<RouteMissionUploadSessionInitializeRequest>,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultRouteMissionUploadSessionInitializeResponse>(
    {
      url: `/api/attempts/${attemptId}/upload/initialize`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: routeMissionUploadSessionInitializeRequest,
    },
    options
  );
};
/**
 * 해당 도전의 영상 업로드 상태 불러오기
 * @summary 해당 도전의 영상 업로드 상태 불러오기
 */
export const getRouteMissionUploadStatus = (
  attemptId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultRouteMissionUploadStatusResponse>(
    { url: `/api/attempts/${attemptId}/upload/status`, method: "GET" },
    options
  );
};
/**
 * 도전 기록의 현재 상태를 확인합니다.
 * @summary 특정 도전 기록의 상태 조회
 */
export const getAttemptStatus = (
  attemptId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultAttemptStatusResponse>(
    { url: `/api/attempts/${attemptId}/status`, method: "GET" },
    options
  );
};
/**
 * 도전한 루트미션과 비슷한 난이도의 루트미션 리스트를 받아보기
 * @summary 도전한 루트미션과 비슷한 난이도의 루트미션 리스트 불러오기
 */
export const getRouteMissionRecommendationByAttempt = (
  attemptId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultListRouteMissionRecommendationResponse>(
    { url: `/api/attempts/${attemptId}/recommendations`, method: "GET" },
    options
  );
};
/**
 * 특정 세션의 도전기록을 성공/실패로 구분하여 조회합니다.
 * @summary 세션별 도전기록 조회
 */
export const getSessionAttempts = (
  sessionId: number,
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultSessionAttemptResponse>(
    { url: `/api/attempts/sessions/${sessionId}`, method: "GET" },
    options
  );
};
/**
 * 사용자의 업로드가 완료되지 않은 도전 기록들을 조회합니다.
 * @summary 업로드 미완료 도전 기록 목록 조회
 */
export const getIncompleteAttempts = (
  options?: SecondParameter<typeof http>
) => {
  return http<ApiResultListUserMissionAttemptResponse>(
    { url: `/api/attempts/incomplete`, method: "GET" },
    options
  );
};
export type GetAttemptsResult = NonNullable<
  Awaited<ReturnType<typeof getAttempts>>
>;
export type CreateAttemptResult = NonNullable<
  Awaited<ReturnType<typeof createAttempt>>
>;
export type FinalizeRouteMissionUploadSessionResult = NonNullable<
  Awaited<ReturnType<typeof finalizeRouteMissionUploadSession>>
>;
export type UploadRouteMissionVideoChunkResult = NonNullable<
  Awaited<ReturnType<typeof uploadRouteMissionVideoChunk>>
>;
export type InitializeRouteMissionUploadSessionResult = NonNullable<
  Awaited<ReturnType<typeof initializeRouteMissionUploadSession>>
>;
export type GetRouteMissionUploadStatusResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMissionUploadStatus>>
>;
export type GetAttemptStatusResult = NonNullable<
  Awaited<ReturnType<typeof getAttemptStatus>>
>;
export type GetRouteMissionRecommendationByAttemptResult = NonNullable<
  Awaited<ReturnType<typeof getRouteMissionRecommendationByAttempt>>
>;
export type GetSessionAttemptsResult = NonNullable<
  Awaited<ReturnType<typeof getSessionAttempts>>
>;
export type GetIncompleteAttemptsResult = NonNullable<
  Awaited<ReturnType<typeof getIncompleteAttempts>>
>;
