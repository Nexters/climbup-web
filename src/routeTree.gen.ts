/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as MissionRouteRouteImport } from './routes/mission/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MyIndexRouteImport } from './routes/my/index'
import { Route as MissionIndexRouteImport } from './routes/mission/index'
import { Route as SessionSessionIdIndexRouteImport } from './routes/session/$sessionId/index'
import { Route as OnboardingLevelIndexRouteImport } from './routes/onboarding/level/index'
import { Route as OnboardingGymIndexRouteImport } from './routes/onboarding/gym/index'
import { Route as Oauth2RedirectIndexRouteImport } from './routes/oauth2/redirect/index'
import { Route as MissionMissionIdIndexRouteImport } from './routes/mission/$missionId/index'
import { Route as MissionMissionIdSuccessIndexRouteImport } from './routes/mission/$missionId/success/index'
import { Route as MissionMissionIdFailedIndexRouteImport } from './routes/mission/$missionId/failed/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const MissionRouteRoute = MissionRouteRouteImport.update({
  id: '/mission',
  path: '/mission',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MyIndexRoute = MyIndexRouteImport.update({
  id: '/my/',
  path: '/my/',
  getParentRoute: () => rootRouteImport,
} as any)
const MissionIndexRoute = MissionIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MissionRouteRoute,
} as any)
const SessionSessionIdIndexRoute = SessionSessionIdIndexRouteImport.update({
  id: '/session/$sessionId/',
  path: '/session/$sessionId/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingLevelIndexRoute = OnboardingLevelIndexRouteImport.update({
  id: '/onboarding/level/',
  path: '/onboarding/level/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingGymIndexRoute = OnboardingGymIndexRouteImport.update({
  id: '/onboarding/gym/',
  path: '/onboarding/gym/',
  getParentRoute: () => rootRouteImport,
} as any)
const Oauth2RedirectIndexRoute = Oauth2RedirectIndexRouteImport.update({
  id: '/oauth2/redirect/',
  path: '/oauth2/redirect/',
  getParentRoute: () => rootRouteImport,
} as any)
const MissionMissionIdIndexRoute = MissionMissionIdIndexRouteImport.update({
  id: '/$missionId/',
  path: '/$missionId/',
  getParentRoute: () => MissionRouteRoute,
} as any)
const MissionMissionIdSuccessIndexRoute =
  MissionMissionIdSuccessIndexRouteImport.update({
    id: '/$missionId/success/',
    path: '/$missionId/success/',
    getParentRoute: () => MissionRouteRoute,
  } as any)
const MissionMissionIdFailedIndexRoute =
  MissionMissionIdFailedIndexRouteImport.update({
    id: '/$missionId/failed/',
    path: '/$missionId/failed/',
    getParentRoute: () => MissionRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/mission': typeof MissionRouteRouteWithChildren
  '/mission/': typeof MissionIndexRoute
  '/my': typeof MyIndexRoute
  '/mission/$missionId': typeof MissionMissionIdIndexRoute
  '/oauth2/redirect': typeof Oauth2RedirectIndexRoute
  '/onboarding/gym': typeof OnboardingGymIndexRoute
  '/onboarding/level': typeof OnboardingLevelIndexRoute
  '/session/$sessionId': typeof SessionSessionIdIndexRoute
  '/mission/$missionId/failed': typeof MissionMissionIdFailedIndexRoute
  '/mission/$missionId/success': typeof MissionMissionIdSuccessIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mission': typeof MissionIndexRoute
  '/my': typeof MyIndexRoute
  '/mission/$missionId': typeof MissionMissionIdIndexRoute
  '/oauth2/redirect': typeof Oauth2RedirectIndexRoute
  '/onboarding/gym': typeof OnboardingGymIndexRoute
  '/onboarding/level': typeof OnboardingLevelIndexRoute
  '/session/$sessionId': typeof SessionSessionIdIndexRoute
  '/mission/$missionId/failed': typeof MissionMissionIdFailedIndexRoute
  '/mission/$missionId/success': typeof MissionMissionIdSuccessIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/mission': typeof MissionRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRoute
  '/mission/': typeof MissionIndexRoute
  '/my/': typeof MyIndexRoute
  '/mission/$missionId/': typeof MissionMissionIdIndexRoute
  '/oauth2/redirect/': typeof Oauth2RedirectIndexRoute
  '/onboarding/gym/': typeof OnboardingGymIndexRoute
  '/onboarding/level/': typeof OnboardingLevelIndexRoute
  '/session/$sessionId/': typeof SessionSessionIdIndexRoute
  '/mission/$missionId/failed/': typeof MissionMissionIdFailedIndexRoute
  '/mission/$missionId/success/': typeof MissionMissionIdSuccessIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/mission'
    | '/mission/'
    | '/my'
    | '/mission/$missionId'
    | '/oauth2/redirect'
    | '/onboarding/gym'
    | '/onboarding/level'
    | '/session/$sessionId'
    | '/mission/$missionId/failed'
    | '/mission/$missionId/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/mission'
    | '/my'
    | '/mission/$missionId'
    | '/oauth2/redirect'
    | '/onboarding/gym'
    | '/onboarding/level'
    | '/session/$sessionId'
    | '/mission/$missionId/failed'
    | '/mission/$missionId/success'
  id:
    | '__root__'
    | '/'
    | '/mission'
    | '/_authenticated'
    | '/mission/'
    | '/my/'
    | '/mission/$missionId/'
    | '/oauth2/redirect/'
    | '/onboarding/gym/'
    | '/onboarding/level/'
    | '/session/$sessionId/'
    | '/mission/$missionId/failed/'
    | '/mission/$missionId/success/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MissionRouteRoute: typeof MissionRouteRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRoute
  MyIndexRoute: typeof MyIndexRoute
  Oauth2RedirectIndexRoute: typeof Oauth2RedirectIndexRoute
  OnboardingGymIndexRoute: typeof OnboardingGymIndexRoute
  OnboardingLevelIndexRoute: typeof OnboardingLevelIndexRoute
  SessionSessionIdIndexRoute: typeof SessionSessionIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mission': {
      id: '/mission'
      path: '/mission'
      fullPath: '/mission'
      preLoaderRoute: typeof MissionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my/': {
      id: '/my/'
      path: '/my'
      fullPath: '/my'
      preLoaderRoute: typeof MyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mission/': {
      id: '/mission/'
      path: '/'
      fullPath: '/mission/'
      preLoaderRoute: typeof MissionIndexRouteImport
      parentRoute: typeof MissionRouteRoute
    }
    '/session/$sessionId/': {
      id: '/session/$sessionId/'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/level/': {
      id: '/onboarding/level/'
      path: '/onboarding/level'
      fullPath: '/onboarding/level'
      preLoaderRoute: typeof OnboardingLevelIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/gym/': {
      id: '/onboarding/gym/'
      path: '/onboarding/gym'
      fullPath: '/onboarding/gym'
      preLoaderRoute: typeof OnboardingGymIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth2/redirect/': {
      id: '/oauth2/redirect/'
      path: '/oauth2/redirect'
      fullPath: '/oauth2/redirect'
      preLoaderRoute: typeof Oauth2RedirectIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mission/$missionId/': {
      id: '/mission/$missionId/'
      path: '/$missionId'
      fullPath: '/mission/$missionId'
      preLoaderRoute: typeof MissionMissionIdIndexRouteImport
      parentRoute: typeof MissionRouteRoute
    }
    '/mission/$missionId/success/': {
      id: '/mission/$missionId/success/'
      path: '/$missionId/success'
      fullPath: '/mission/$missionId/success'
      preLoaderRoute: typeof MissionMissionIdSuccessIndexRouteImport
      parentRoute: typeof MissionRouteRoute
    }
    '/mission/$missionId/failed/': {
      id: '/mission/$missionId/failed/'
      path: '/$missionId/failed'
      fullPath: '/mission/$missionId/failed'
      preLoaderRoute: typeof MissionMissionIdFailedIndexRouteImport
      parentRoute: typeof MissionRouteRoute
    }
  }
}

interface MissionRouteRouteChildren {
  MissionIndexRoute: typeof MissionIndexRoute
  MissionMissionIdIndexRoute: typeof MissionMissionIdIndexRoute
  MissionMissionIdFailedIndexRoute: typeof MissionMissionIdFailedIndexRoute
  MissionMissionIdSuccessIndexRoute: typeof MissionMissionIdSuccessIndexRoute
}

const MissionRouteRouteChildren: MissionRouteRouteChildren = {
  MissionIndexRoute: MissionIndexRoute,
  MissionMissionIdIndexRoute: MissionMissionIdIndexRoute,
  MissionMissionIdFailedIndexRoute: MissionMissionIdFailedIndexRoute,
  MissionMissionIdSuccessIndexRoute: MissionMissionIdSuccessIndexRoute,
}

const MissionRouteRouteWithChildren = MissionRouteRoute._addFileChildren(
  MissionRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MissionRouteRoute: MissionRouteRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRoute,
  MyIndexRoute: MyIndexRoute,
  Oauth2RedirectIndexRoute: Oauth2RedirectIndexRoute,
  OnboardingGymIndexRoute: OnboardingGymIndexRoute,
  OnboardingLevelIndexRoute: OnboardingLevelIndexRoute,
  SessionSessionIdIndexRoute: SessionSessionIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
