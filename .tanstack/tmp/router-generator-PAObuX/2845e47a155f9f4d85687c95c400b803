/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MissionRouteImport } from './routes/mission'
import { Route as GymRouteImport } from './routes/gym'
import { Route as DifficultyRouteImport } from './routes/difficulty'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'

const MissionRoute = MissionRouteImport.update({
  id: '/mission',
  path: '/mission',
  getParentRoute: () => rootRouteImport,
} as any)
const GymRoute = GymRouteImport.update({
  id: '/gym',
  path: '/gym',
  getParentRoute: () => rootRouteImport,
} as any)
const DifficultyRoute = DifficultyRouteImport.update({
  id: '/difficulty',
  path: '/difficulty',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/difficulty': typeof DifficultyRoute
  '/gym': typeof GymRoute
  '/mission': typeof MissionRoute
  '/users/$userId': typeof UsersUserIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/difficulty': typeof DifficultyRoute
  '/gym': typeof GymRoute
  '/mission': typeof MissionRoute
  '/users/$userId': typeof UsersUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/difficulty': typeof DifficultyRoute
  '/gym': typeof GymRoute
  '/mission': typeof MissionRoute
  '/users/$userId': typeof UsersUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/difficulty' | '/gym' | '/mission' | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/difficulty' | '/gym' | '/mission' | '/users/$userId'
  id: '__root__' | '/' | '/difficulty' | '/gym' | '/mission' | '/users/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DifficultyRoute: typeof DifficultyRoute
  GymRoute: typeof GymRoute
  MissionRoute: typeof MissionRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/mission': {
      id: '/mission'
      path: '/mission'
      fullPath: '/mission'
      preLoaderRoute: typeof MissionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gym': {
      id: '/gym'
      path: '/gym'
      fullPath: '/gym'
      preLoaderRoute: typeof GymRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/difficulty': {
      id: '/difficulty'
      path: '/difficulty'
      fullPath: '/difficulty'
      preLoaderRoute: typeof DifficultyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DifficultyRoute: DifficultyRoute,
  GymRoute: GymRoute,
  MissionRoute: MissionRoute,
  UsersUserIdRoute: UsersUserIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
